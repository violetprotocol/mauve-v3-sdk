import { EATMulticall } from './EATmulticall'

// Create fake signature for encoding
const v = 1
const r = '0xf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb'
const s = '0xf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb'
const expiry = 2

describe('EATMulticall', () => {
  describe('#encodePostsignMulticall', () => {
    it('works for string', async () => {
      const calldata = EATMulticall.encodePostsignMulticall(v, r, s, expiry, '0x03')
      expect(calldata).toBe(
        '0x2efb614b0000000000000000000000000000000000000000000000000000000000000001f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fbf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010300000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works for string array with length 1', async () => {
      const calldata = EATMulticall.encodePostsignMulticall(v, r, s, expiry, ['0x03'])
      expect(calldata).toBe(
        '0x2efb614b0000000000000000000000000000000000000000000000000000000000000001f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fbf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010300000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works for string array with length >1', async () => {
      let calldata = EATMulticall.encodePostsignMulticall(v, r, s, expiry, [
        '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'
      ])
      expect(calldata).toBe(
        '0x2efb614b0000000000000000000000000000000000000000000000000000000000000001f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fbf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000020bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'
      )

      calldata = EATMulticall.encodePostsignMulticall(v, r, s, expiry, [
        '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
        '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'
      ])
      expect(calldata).toBe(
        '0x2efb614b0000000000000000000000000000000000000000000000000000000000000001f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fbf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000020bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000020cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'
      )
    })
  })

  describe('#encodePresignMulticall', () => {
    it('works for string', async () => {
      const calldata = EATMulticall.encodePresignMulticall('0x03')
      expect(calldata).toBe(
        '0x2efb614b00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010300000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works for string array with length 1', async () => {
      const calldata = EATMulticall.encodePresignMulticall(['0x03'])
      expect(calldata).toBe(
        '0x2efb614b00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010300000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works for string array with length >1', async () => {
      let calldata = EATMulticall.encodePresignMulticall([
        '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'
      ])
      expect(calldata).toBe(
        '0x2efb614b00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000020bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'
      )

      calldata = EATMulticall.encodePresignMulticall([
        '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
        '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'
      ])
      expect(calldata).toBe(
        '0x2efb614b00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000020bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000020cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'
      )
    })
  })
})

// 0x
// 2efb614b                                                         bytes4(keccak256('multicall(uint8,bytes32,bytes32,uint256,bytes[]')))
// 0000000000000000000000000000000000000000000000000000000000000001 v
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb r
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb s
// 0000000000000000000000000000000000000000000000000000000000000002 expiry
// 00000000000000000000000000000000000000000000000000000000000000a0 position of head of bytes[]
// 0000000000000000000000000000000000000000000000000000000000000001 length of bytes[] array
// 0000000000000000000000000000000000000000000000000000000000000020 position of first item
// 0000000000000000000000000000000000000000000000000000000000000001 length of first item
// 0300000000000000000000000000000000000000000000000000000000000000 first item

// 0x
// 2efb614b                                                         bytes4(keccak256('multicall(uint8,bytes32,bytes32,uint256,bytes[]')))
// 0000000000000000000000000000000000000000000000000000000000000001 v
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb r
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb s
// 0000000000000000000000000000000000000000000000000000000000000002 expiry
// 00000000000000000000000000000000000000000000000000000000000000a0 position of head of bytes[]
// 0000000000000000000000000000000000000000000000000000000000000001 length of bytes[] array
// 0000000000000000000000000000000000000000000000000000000000000020 position of first item
// 0000000000000000000000000000000000000000000000000000000000000001 length of first item
// 0300000000000000000000000000000000000000000000000000000000000000 first item

// 0x
// 2efb614b                                                         bytes4(keccak256('multicall(uint8,bytes32,bytes32,uint256,bytes[]')))
// 0000000000000000000000000000000000000000000000000000000000000001 v
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb r
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb s
// 0000000000000000000000000000000000000000000000000000000000000002 expiry
// 00000000000000000000000000000000000000000000000000000000000000a0 pointer to where bytes[] begins
// 0000000000000000000000000000000000000000000000000000000000000002 length of bytes[] array
// 0000000000000000000000000000000000000000000000000000000000000040 position of first item
// 0000000000000000000000000000000000000000000000000000000000000080 position of second item
// 0000000000000000000000000000000000000000000000000000000000000020 length of first item
// aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa first item
// 0000000000000000000000000000000000000000000000000000000000000020 length of second item
// bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb second item

// 0x
// 2efb614b                                                         bytes4(keccak256('multicall(uint8,bytes32,bytes32,uint256,bytes[]')))
// 0000000000000000000000000000000000000000000000000000000000000001 v
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb r
// f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb s
// 0000000000000000000000000000000000000000000000000000000000000002 expiry
// 00000000000000000000000000000000000000000000000000000000000000a0 position of where bytes[] begins
// 0000000000000000000000000000000000000000000000000000000000000003 length of bytes[] array
// 0000000000000000000000000000000000000000000000000000000000000060 position of first item
// 00000000000000000000000000000000000000000000000000000000000000a0 position of second item
// 00000000000000000000000000000000000000000000000000000000000000e0 position of third item
// 0000000000000000000000000000000000000000000000000000000000000020 length of first item
// aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa first item
// 0000000000000000000000000000000000000000000000000000000000000020 length of second item
// bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb second item
// 0000000000000000000000000000000000000000000000000000000000000020 position of third item
// cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc third item
